<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
         version="4.0">
<!--    使用springmvc来加载所有的bean，解决springsecurity-->
<!--    &lt;!&ndash; 1. 配置 ContextLoaderListener 加载 Spring 配置文件 &ndash;&gt;-->
<!--    <context-param>-->
<!--        <param-name>contextConfigLocation</param-name>-->
<!--        <param-value>classpath:spring-persist-*.xml</param-value>-->
<!--    </context-param>-->
<!--    <listener>-->
<!--        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>-->
<!--    </listener>-->

    <!-- 2. 配置 CharacterEncodingFilter 解决 POST 请求的字符乱码问题 -->
    <filter>
        <filter-name>CharacterEncodingFilter</filter-name>
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
        <init-param>
            <param-name>encoding</param-name>
            <param-value>utf-8</param-value>
        </init-param>
        <init-param>
            <param-name>forceRequestEncoding</param-name>
            <param-value>true</param-value>
        </init-param>
        <init-param>
            <param-name>forceResponseEncoding</param-name>
            <param-value>true</param-value>
        </init-param>
    </filter>
    <filter-mapping>
        <filter-name>CharacterEncodingFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

    <!-- 3. 配置 SpringMVC 的前端控制器 -->
    <servlet>
        <servlet-name>dispatcherServlet</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <!-- 以初始化参数的形式指定 SpringMVC 配置文件的位置 -->
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <!--全部由springmvc来加载bean-->
            <param-value>classpath:spring-*.xml</param-value>
        </init-param>
        <!--servlet默认初始化是在类第一次接受时请求的，
        而dispacherServlet创建对象后对象会有大量的框架初始化工作，不适合第一次请求时创建
        设置load-on-startup就是为了在web启动时创建对象-->
        <load-on-startup>1</load-on-startup>
    </servlet>
    <servlet-mapping>
        <servlet-name>dispatcherServlet</servlet-name>
        <!--配置1：/表示拦截所有请求
        <url-pattern>/</url-pattern> -->
        <!--配置2：配置请求扩展名
        优点1：css。js等静态资源可以不经过spirngmvc，不需要处理
        优点2：实现伪静态效果，表面上是一个html静态资源，但实际是java运算生成的，有利于seo优化，可以增加入侵难度
        缺点：不符合restful风格-->
        <url-pattern>*.html</url-pattern>
        <!--如果ajax请求的扩展名时html，但实际服务器返回给浏览器的是json，两者不匹配会出现406错误-->
        <url-pattern>*.json</url-pattern>
    </servlet-mapping>
    <!--引入springsecurity filter-->
    <filter>
        <filter-name>springSecurityFilterChain</filter-name>
        <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
    </filter>
    <filter-mapping>
        <filter-name>springSecurityFilterChain</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>
</web-app>